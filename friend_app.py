# import pandas as pd# import numpy as npimport pickle# import plotly.graph_objects as go# import seaborn as snsimport matplotlib.pyplot as pltimport streamlit as st# Welcome header/information.col1, mid, col2 = st.columns([3,.1,3])with col1:    st.image('./images/FRIEND_logo.jpg', width=250)with col2:    st.write("# Welcome to FRIEND!")st.write('''"FRIEND" stands for the **Fitness Registry and Importance of Exercise International Database**. FRIEND is an international database of cardiorespiratory fitness tests collected in high-quality laboratoriesfrom around the world.Below you will find a variety of summaries about the database, a calculator to estimate your VO2max (fitness) and determine your fitness percentile, and highlights of reaserch from the database.''')###### Start with showing states with test data.st.write('''## Where the test data comes from:''')show_map = st.radio("Location of interest:", ("United States", "Global"),                     index=0)if show_map == "United States":    with open('data/summary_fig_usa.pickle','rb') as read_file:        fig = pickle.load(read_file)else:    with open('data/summary_fig_global.pickle','rb') as read_file:        fig = pickle.load(read_file)st.plotly_chart(fig)      ###### Create a CRF percentile calculator.from ref_calcs import friend_percentilest.write('''## Determine your fitness percentile!(Reference values for fitness percentiles are based on US-only data and come from  [this 2022 FRIEND publication](https://www.mayoclinicproceedings.org/article/S0025-6196(21)00645-5/fulltext))''')crf_type = st.radio("Do you already know your VO2max?", ("Yes", "No"),                     index=1)if crf_type == "Yes":    col1, col2 = st.columns(2)        with col1:        sex = st.selectbox("Your sex:", ("Male", "Female"), index=1)        mode = st.selectbox("Testing mode you used:",                             ("Treadmill", "Cycle Ergometer"), index=0)        with col2:        age = st.selectbox("Your age range:", ("20-29", "30-39", "40-49",                                               "50-59", "60-69", "70-79",                                                "80-89"), index=1)        age = int(age[:2])        vo_2 = st.number_input('Enter your VO2max value:', min_value=(0.0),                            max_value=(99.9), step=0.1, value=38.6)        crf_perc = friend_percentile(vo_2, age, sex, mode)        st.metric("Your fitness percentile is:", crf_perc)else:    st.write("""             This estimated VO2max comes from real-time regression              analysis on FRIEND.""")    col1, col2 = st.columns(2)        with col1:        sex = st.selectbox("Your sex:", ("Male", "Female"), index=1)        sex_num = 1 if sex == "Male" else 0        ht = st.selectbox("Select your height:",                           ("5 ft, 0 in", "5ft, 1 in",                           "5 ft, 2 in", "5ft, 3 in",                           "5 ft, 4 in", "5ft, 5 in",                           "5 ft, 6 in", "5ft, 7 in",                           "5 ft, 8 in", "5ft, 9 in",                           "5 ft, 10 in", "5ft, 11 in",                           "6 ft, 0 in", "6ft, 1 in",                           "6 ft, 2 in", "6ft, 3 in",                           "6 ft, 4 in", "6ft, 5 in",                           "6 ft, 6 in", "6ft, 7 in",                           "6 ft, 8 in", "6ft, 9 in",                           "6 ft, 10 in", "6ft, 11 in"), index=7)        ht = (int(ht.split(", ")[0][0]) * 12) + (int(ht.split(", ")[1][:2]))        mode = st.selectbox("What exercise mode are you interested in",                        ("Treadmill", "Cycling"), index=0)        mode_num = 1 if mode == "Treadmill" else 0        with col2:        age = st.number_input("Enter your age:", min_value=(18),                               max_value=(90), step=1, value=(29))        wt = st.slider("Select your weight (in lbs):", min_value=(40),                       max_value=(350), value=(170), step=(1))        country = st.selectbox("Select a Region/Country:",                            ("Global", "Brazil", "Canada",                             "Switzerland", "Spain",                             "Netherlands", "USA",                             "Virgin Islands"), index=0)               country_lst = ["Brazil", "Canada", "Switzerland", "Spain",                        "Netherlands", "USA", "Virgin Islands"]        # Import the model depending on which data user wants.    # Then, create the appropriate list of variables to enter into model.    if country in country_lst:        with open('./data/reg_model_country.pickle','rb') as read_file:            lm_OLS = pickle.load(read_file)        entry_for_model = [1 if x == country else 0 for x in country_lst]        entry_for_model = [age, sex_num, ht, wt, mode_num] + entry_for_model            else:        with open('./data/reg_model_global.pickle','rb') as read_file:            lm_OLS = pickle.load(read_file)        entry_for_model = [age, sex_num, ht, wt, mode_num]                    vo_2 = round(lm_OLS.predict([entry_for_model])[0],1)    crf_perc = friend_percentile(vo_2, age, sex, mode)    st.metric("Your estimated VO2max is:", vo_2)    st.metric("Your estimated (USA-specific) fitness percentile is:",               crf_perc)###### Create summary line graphs.st.write('''## Explore trends in health metrics for the US population:''')# Determine the variable of interest to graph.col1, col2 = st.columns(2)with col1:    var_int = st.selectbox("What variable are you interested in?",                            ("VO2max", "Resting Systolic Blood Pressure",                            "BMI", "Maximum Heart Rate"), index=0)with col2:    grp = st.selectbox("What exercise modes do you want to include?",                            ("Treadmill", "Cycling", "Both"), index=2)    if grp == "Both":    with open('./data/line_graph_modes_combined.pickle', 'rb') as to_read:        df = pickle.load(to_read)else:    with open('./data/line_graph_modes_separate.pickle', 'rb') as to_read:        df = pickle.load(to_read)    if grp == "Treadmill":        df = df.query("ExMode == 'TM'")    else:        df = df.query("ExMode == 'CY'")if var_int == "VO2max":    y_label = var_int + " (ml/kg/min)"    var_int = "VO2_rel"elif "Pressure" in var_int:    y_label = var_int + " (mmHg)"    var_int = "RestingSBP"elif "Heart" in var_int:    y_label = var_int + " (beats/min)"    var_int = "MaxHR"else:    y_label = var_int + " (kg/m2)"var_int_SD = var_int + "_std"# Create the summary values and SD.x_male = df.query("Sex == 'Male'").AgeGroupy_male = df.query("Sex == 'Male'")[var_int]error_male = df.query("Sex == 'Male'")[var_int_SD]upper_male = y_male + error_malelower_male = y_male - error_malex_female = df.query("Sex == 'Female'").AgeGroupy_female = df.query("Sex == 'Female'")[var_int]error_female = df.query("Sex == 'Female'")[var_int_SD]upper_female = y_female + error_femalelower_female = y_female - error_female# Create the figure.fig, ax = plt.subplots(figsize=(9,5))ax.plot(x_male, y_male, label='Males')ax.plot(x_male, lower_male, color='tab:blue', alpha=0.1)ax.plot(x_male, lower_male, color='tab:blue', alpha=0.1)ax.fill_between(x_male, lower_male, upper_male, alpha=0.2)for i,v in enumerate(y_male):    ax.text(i, v+3, f"{v:.1f}", ha = "center", color='navy', fontweight='bold')ax.plot(x_female, y_female, label='Females')ax.plot(x_female, lower_female, color='tab:blue', alpha=0.1)ax.plot(x_female, upper_female, color='tab:blue', alpha=0.1)ax.fill_between(x_female, lower_female, upper_female, alpha=0.2)for i,v in enumerate(y_female):    ax.text(i, v-3, f"{v:.1f}", ha = "center", color='peru', fontweight='bold')ax.legend(loc="upper right")ax.set_xlabel('Age Group')ax.set_ylabel(y_label)ax.spines['top'].set_visible(False)ax.spines['right'].set_visible(False)st.pyplot(fig)st.write("""The line on the graph indicates the average while the shaded area represents the standard deviation.""")###### Create publications list.st.write("""## Publications using data from FRIEND:""")# Print the pubs with links to them.with open('./data/publications.pickle','rb') as read_file:            pubs_lst = pickle.load(read_file)st.write("\n\n".join(pubs_lst))