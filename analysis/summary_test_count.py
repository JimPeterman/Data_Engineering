from sqlalchemy import create_engineimport pandas as pdimport pickleimport plotly.graph_objects as goimport seaborn as snsimport matplotlib.pyplot as pltengine = create_engine("sqlite:///.././data_NO_github/friend.db")df = pd.read_sql("SELECT \                        Age, Sex, State, Country, Height, Weight, BMI,\                        CVDstatus, ExMode, VO2_rel\                     FROM data", engine)                                                             # Help with these figures comes from: https://plotly.com/python/choropleth-maps/"""## Create the USA figure."""# Create a table with the total number of tests, TM tests, and CY tests.df_usa = df.query("Country == 'USA'")df_cy = df_usa.query("ExMode == 'CY'")df_cy = df_cy.groupby(by=["State"]).size()df_cy = df_cy.reset_index()df_cy = df_cy.set_axis(["State", "CYcount"], axis=1)df_tm = df_usa.query("ExMode == 'TM'")df_tm = df_tm.groupby(by=["State"]).size()df_tm = df_tm.reset_index()df_tm = df_tm.set_axis(["State", "TMcount"], axis=1)df_usa = df_usa.groupby(by=["State"]).size()df_usa = df_usa.reset_index()df_usa = df_usa.set_axis(["State","ALLcount"], axis=1)df_usa = pd.merge(df_usa, df_cy, how="outer")df_usa = pd.merge(df_usa, df_tm, how="outer")# Replace missing with 0's and make int for cleaner printing.df_usa["CYcount"] = df_usa["CYcount"].fillna(0).astype(int)df_usa["TMcount"] = df_usa["TMcount"].fillna(0).astype(int)# Create the text for each state in the figure.for col in df_usa.columns:    df_usa[col] = df_usa[col].astype(str)df_usa["text"] = df_usa["State"] + "<br>" + \    "Treadmill tests: " + df_usa["TMcount"] + "<br>" + \    "Cycling tests: " + df_usa["CYcount"]# Create the figure.fig = go.Figure(data=go.Choropleth(    locations=df_usa['State'],     z = df_usa['ALLcount'].astype(float), # Data to be color-coded    locationmode = 'USA-states', # set of locations match entries in `locations`    text = df_usa["text"],    colorscale = 'Greens',    colorbar_title = "Number of Tests",))fig.update_layout(    title_text = 'Current Distribution of Tests from the US in FRIEND<br>(Hover for breakdown by test mode)',    geo_scope='usa', # limite map scope to USA)with open('./data/summary_fig_usa.pickle', 'wb') as to_write:    pickle.dump(fig, to_write)"""## Create the global figure."""# Create a table with the total number of tests, TM tests, and CY tests.df_world_cy = df.query("ExMode == 'CY'")df_world_cy = df_world_cy.groupby(by=["Country"]).size()df_world_cy = df_world_cy.reset_index()df_world_cy = df_world_cy.set_axis(["Country", "CYcount"], axis=1)df_world_tm = df.query("ExMode == 'TM'")df_world_tm = df_world_tm.groupby(by=["Country"]).size()df_world_tm = df_world_tm.reset_index()df_world_tm = df_world_tm.set_axis(["Country", "TMcount"], axis=1)df_world = df.Country.value_counts()df_world = df_world.reset_index()df_world = df_world.set_axis(["Country", "ALLcount"], axis=1)df_world = pd.merge(df_world, df_world_cy, how="outer")df_world = pd.merge(df_world, df_world_tm, how="outer")# Replace missing with 0's and make int for cleaner printing.df_world["CYcount"] = df_world["CYcount"].fillna(0).astype(int)df_world["TMcount"] = df_world["TMcount"].fillna(0).astype(int)# Create the text for each country in the figure.for col in df_world.columns:    df_world[col] = df_world[col].astype(str)df_world["text"] = df_world["Country"] + "<br>" + \    "Treadmill tests: " + df_world["TMcount"] + "<br>" + \    "Cycling tests: " + df_world["CYcount"]# Create the figure.fig = go.Figure(data=go.Choropleth(    locations=df_world['Country'],     z = df_world['ALLcount'].astype(float), # Data to be color-coded    text = df_world["text"],    colorscale = 'Reds',    colorbar_title = "Number of Tests",))fig.update_layout(    title_text = 'Current Distribution of Tests from Around the World in FRIEND<br>(Hover for breakdown by test mode)',)with open('./data/summary_fig_global.pickle', 'wb') as to_write:    pickle.dump(fig, to_write)"""## Create the distribution figures."""# Filtering extraneous values.df = df.query("CVDstatus == 0 | CVDstatus == 1")df = df.query("Sex == 'Male' | Sex == 'Female'")df = df.query("ExMode == 'TM' | ExMode == 'CY'")df = df.query("VO2_rel > 5 & VO2_rel < 95")df = df.query("BMI > 15 & BMI < 60")df = df.query("Height > 48 & Height < 84")df = df.query("Weight > 38 & Weight < 500")df = df.query("Age >= 10 & Age < 100")# Recode mode to improve readability of resulting graph.df["ExMode"] = df.ExMode.apply(lambda x: "Treadmill" if x == 'TM'                                else "Cycling" if x == 'CY' else None)# Dictionary to speed up graphing: Keys are the df columns, # values[0] are axis labels, values[1] are title labels.dct_plot = {    "Sex": ["Sex", "Sex"],    "ExMode":["Exercise Mode", "Exercise Mode"],    "VO2_rel": ["VO2max (ml/kg/min)", "VO2max"],    "Height": ["Height (inches)", "Height"],    "Weight": ["Weight (lbs)", "Weight"],    "BMI": ["BMI (kg/m2)", "BMI"],    "Age": ["Age (years)", "Age"]}for k,v in dct_plot.items():    fig, ax = plt.subplots(figsize=(5,5))    sns.histplot(df[k], kde=False,                  color = 'steelblue')    # Add labels    plt.title(f"Distribution of {v[1]}", weight="bold", size=16)    plt.xlabel(v[0], weight="bold")    plt.ylabel('Number of Tests', weight="bold")        with open(f"./data/distribution_{v[1]}.pickle", 'wb') as to_write:        pickle.dump(fig, to_write)