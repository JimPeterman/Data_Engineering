from sqlalchemy import create_engineimport pandas as pdimport pickleengine = create_engine("sqlite:///.././data_NO_github/friend.db")df_all = pd.read_sql("SELECT \                        Age, Sex, State, Country, Height, Weight, BMI,\                        CABGstatus, MIstatus, PCIstatus, HFstatus, CVDstatus,\                        ExMode, RestingSBP, MaxRER, VO2_rel, MaxHR\                     FROM data", engine)# Recode some variables to help with graphing in Streamlit.df_all["CVDstatus"] = df_all.CVDstatus.apply(lambda x: "Healthy" if x == 0                                              else "CVD" if x == 1 else None)df_all["ExMode"] = df_all.ExMode.apply(lambda x: "Treadmill" if x == 'TM'                                        else "Cycling" if x == 'CY' else None)# Initial tables include only "healthy" individuals ("df").# Clean up some data (get rid of outliers and select within certain ranges).df = df_all.query("CVDstatus == 'Healthy'")df = df.query("Sex == 'Male' | Sex == 'Female'")df = df.query("ExMode == 'Treadmill' | ExMode == 'Cycling'")df = df.query("VO2_rel > 5 & VO2_rel < 95")df = df.query("BMI > 15 & BMI < 60")df = df.query("Height > 48 & Height < 84")df = df.query("Weight > 38 & Weight < 500")df = df.query("Age >= 20 & Age < 90")df = df.query("MaxHR > 100 & MaxHR < 250")# Only use USA data at this point.df = df.query("Country == 'USA'")# Create age groups (age in decile groups).df["AgeGroup"] = df.Age.apply(lambda x: f"{str(x)[0]}0s")######## Create "other metrics" table (using only TM data).df_metrics = df.query("ExMode == 'Treadmill'")df_avg_metrics = df_metrics.groupby(    ["AgeGroup", "Sex"], as_index = False).agg(    {"RestingSBP":["mean", "std"],     "Height":["mean", "std"],     "Weight":["mean", "std"],     "BMI":["mean", "std"],     "MaxHR":["mean", "std"]})# Collapse the column labels into 1 line.df_avg_metrics.columns = ['_'.join(col).strip() if col[1] == "std"\                           else col[0] for col in df_avg_metrics.columns.values]with open('./data/line_graph_other_metrics.pickle', 'wb') as to_write:    pickle.dump(df_avg_metrics, to_write)        ######## Create VO2 table with TM and CY separate.# Since the rest are all VO2 summaries, now use RER criteria to define max test.df = df.query("MaxRER > 1.0")df_avg_modes = df.groupby(    ["ExMode", "AgeGroup", "Sex"], as_index = False).agg(    {"VO2_rel":["mean", "std"]})# Collapse the column labels into 1 line.df_avg_modes.columns = ['_'.join(col).strip() if col[1] == "std"\                           else col[0] for col in df_avg_modes.columns.values]with open('./data/line_graph_modes_separate.pickle', 'wb') as to_write:    pickle.dump(df_avg_modes, to_write)######## Create VO2 table with TM and CY separate (by REGION).# Function to indicate which region of the US a state is associated with.def state_to_region(state=str):    """    Input 2-letter state code as string.    Returns US region as a string (or None if incorrect state input).    """    us_regions = {        "South": ["TX", "NC", "MD", "DC", "VA", "LA", "TN",                  "GA", "FL", "SC", "AL", "KY", "MS", "OK",                  "WV", "AR"],        "Northeast": ["MA", "NJ", "NY", "CT", "VT", "NH",                     "DE", "RI", "ME"],        "Midwest": ["OH", "MO", "KS", "IN", "IL", "PA", "WI",                   "MI", "IA", "MN", "ND", "SD", "NE"],        "West": ["WA", "AZ", "NV", "CA", "UT", "OR", "CO",                "MT", "NM", "ID", "WY"],        "Pacific": ["AK", "HI"]    }        for k,v in us_regions.items():        if state in v:            return k        return None # Create US region columndf["CensusRegion"] = df.State.apply(lambda x: state_to_region(x))df_avg_modes_region = df.groupby(    ["CensusRegion", "ExMode", "AgeGroup", "Sex"], as_index = False).agg(    {"VO2_rel":["mean", "std"]})df_avg_modes_region.columns = ['_'.join(col).strip() if col[1] == "std"\                     else col[0] for col in df_avg_modes_region.columns.values]    with open('./data/line_graph_modes_region.pickle', 'wb') as to_write:    pickle.dump(df_avg_modes_region, to_write)    # Also want to save a list of regions with <500 tests (to exclude from app).region_low_cts = list(df.groupby("CensusRegion").                      filter(lambda x: len(x) < 500)["CensusRegion"].                      unique())# Saving as a txt file is maybe better than pickle. with open("./data/line_graph_region_counts.txt", "w") as output:    output.write("\n".join(region_low_cts))# with open('../data/line_graph_region_counts.pickle', 'wb') as to_write:#     pickle.dump(region_low_cts, to_write)        ######## Create VO2 table with TM and CY separate (by CVD status).# Now include only "healthy" and "CVD" individuals.# Clean up some data (get rid of outliers and select within certain ranges).df_CVD = df_all.query("CVDstatus == 'Healthy' | CVDstatus == 'CVD'")df_CVD = df_CVD.query("Sex == 'Male' | Sex == 'Female'")df_CVD = df_CVD.query("ExMode == 'Treadmill' | ExMode == 'Cycling'")df_CVD = df_CVD.query("VO2_rel > 5 & VO2_rel < 95")df_CVD = df_CVD.query("BMI > 15 & BMI < 60")df_CVD = df_CVD.query("Height > 48 & Height < 84")df_CVD = df_CVD.query("Weight > 38 & Weight < 500")df_CVD = df_CVD.query("Age >= 40 & Age < 90")df_CVD = df_CVD.query("MaxHR > 100 & MaxHR < 250") # Only use USA data. df_CVD = df_CVD.query("Country == 'USA'")# Create age groups (age in decile groups).df_CVD["AgeGroup"] = df_CVD.Age.apply(lambda x: f"{str(x)[0]}0s")    df_avg_modes_cvd = df_CVD.groupby(    ["CVDstatus", "ExMode", "AgeGroup", "Sex"], as_index = False).agg(    {"VO2_rel":["mean", "std"]})df_avg_modes_cvd.columns = ['_'.join(col).strip() if col[1] == "std"\                           else col[0] for col in df_avg_modes_cvd.columns.values]      with open('./data/line_graph_modes_cvd.pickle', 'wb') as to_write:    pickle.dump(df_avg_modes_cvd, to_write)######## Create VO2 table with TM and CY separate (by CVD category).# Define the CVD categories (Peterman et al. 2021 JAHA)def cvd_categorization(CABG, MI, PCI, HF):    if HF == 1:        return "HF"    elif CABG == 1 and PCI == 0:        return "CABG"    elif PCI == 1 and MI == 0 and CABG == 0:        return "PCI"    elif MI == 1 and CABG == 0:        return "MI"    else:        return Nonedf_CVD["CVDcategory"] = df_CVD.apply(lambda x:                             cvd_categorization(x.CABGstatus, x.MIstatus,                                 x.PCIstatus, x.HFstatus), axis=1)df_avg_modes_cvd_specific = df_CVD.groupby(    ["CVDcategory", "ExMode", "AgeGroup", "Sex"], as_index = False).agg(    {"VO2_rel":["mean", "std"]})df_avg_modes_cvd_specific.columns = ['_'.join(col).strip() if                         col[1] == "std" else col[0] for col in                         df_avg_modes_cvd_specific.columns.values]# Get the healthy data from the above CVDstatus summary to add to categories.temp_df = df_avg_modes_cvd.query("CVDstatus == 'Healthy'")temp_df = temp_df.rename(columns = {"CVDstatus":"CVDcategory"})df_avg_modes_cvd_specific = pd.concat([df_avg_modes_cvd_specific, temp_df])with open('./data/line_graph_modes_cvd_specific.pickle', 'wb') as to_write:    pickle.dump(df_avg_modes_cvd_specific, to_write)    