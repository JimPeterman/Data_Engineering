import pandas as pdimport sqlite3col_interest = ["ageattest", "Gender", "Country", "state",               "weight", "height", "BMI", "resting_sbp", "resting_dbp",                "ANYCVD", "CABG", "MI", "PCI", "HeartFailure",                "Mode", "vo2_ml_kg_min", "max_hr", "max_rer", "Facility"]# Bit of error handling to ensuretry:    df = pd.read_excel("../data_NO_github/FRIEND_dataset.xlsx",                        usecols=col_interest)except:    print("ERROR: FRIEND file needs to be .xlsx and labeled:'FRIEND_dataset'.")    print("Or did you forget to place it in the data_NO_github folder?")    raise SystemExit(0)        # Add in "ID" column that's just the index and rename other columns.df.reset_index(inplace=True)df.rename(columns={"index":"PersonID",                  "ageattest":"Age",                  "Gender":"Sex",                  "state":"State",                  "height":"Height",                  "weight":"Weight",                  "ANYCVD":"CVDstatus",                  "MI":"MIstatus",                  "CABG":"CABGstatus",                  "PCI":"PCIstatus",                  "HeartFailure":"HFstatus",                  "Mode":"ExMode",                  "resting_sbp":"RestingSBP",                  "resting_dbp":"RestingDBP",                  "max_rer":"MaxRER",                  "max_hr":"MaxHR",                  "vo2_ml_kg_min":"VO2_rel"}, inplace=True)### Do some initial cleaning before adding to the SQL database.def make_num_exception(val):    """    Convert elements to numeric.    If NOT able to convert, return None.    """    try:        return float(val)    except ValueError:        # Can print what the non-numeric character was.#         print("Error found with entry: " + val)        return None# Convert all entries in this column to numeric.col_to_num_lst = ["Age", "Height", "Weight", "CVDstatus", "MIstatus",                   "CABGstatus", "PCIstatus", "HFstatus", "RestingSBP",                   "RestingDBP", "MaxRER", "MaxHR", "VO2_rel"]for col in col_to_num_lst:    df[col] = df[col].apply(make_num_exception)    # Make CVD status 1 or 0 (leaving nan).df.loc[df["CVDstatus"] > 1] = 1# Make Sex only M or F.df["Sex"] = df["Sex"].apply(lambda x:                             x if x == "Male" or x == "Female" else None)    # Combine some exercise modes entries (to get TM, CY, or O[for other]).df["ExMode"] = df["ExMode"].apply(lambda x: "CY" if x == "Upright C" or                                  x == "Recumbent" else x)df["ExMode"] = df["ExMode"].apply(lambda x: "O" if x == "Other" or                                  x == "ArmEr" or x == 1 else x)### Now create/update the SQL database.# To determine if database needs to be created or just updated.from os.path import existsfile_exists = exists("../data_NO_github/friend.db")# Create/open the SQL database.db_conn = sqlite3.connect("../data_NO_github/friend.db")# Create a cursor object to execute SQL code.c = db_conn.cursor()# Create the SQL database (if needed).if not file_exists:    c.execute(        '''        CREATE TABLE data (        PersonID INTEGER,        Age REAL,        Sex TEXT NOT NULL,        State TEXT NOT NULL,        Country TEXT NOT NULL,        Height REAL,        Weight REAL,        BMI REAL,        CABGstatus INTEGER,        MIstatus INTEGER,        PCIstatus INTEGER,        HFstatus INTEGER,        CVDstatus INTEGER,        ExMode TEXT NOT NULL,        RestingSBP REAL,        RestingDBP REAL,        MaxRER REAL,        VO2_rel REAL,        MaxHR REAL,        Facility TEXT,        PRIMARY KEY(PersonID)        );        '''    )    # Replace the data currently in the SQL database.df.to_sql("data", db_conn, if_exists="replace", index=False) # Close the SQL database connection.db_conn.close()